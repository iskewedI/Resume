{"version":3,"sources":["misc/img/Circle.svg","misc/img/Normal_Texture.png","misc/img/Rope_Texture.jpg","misc/img/Loading.svg","components/global/Loading.js","components/global/GeometryLoading.js","misc/img/Moon_Texture.jpg","components/lab/Moon.js","components/scene/CameraControls.js","components/scene/MainScene.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","src","LoadingSVG","alt","GeometryLoading","color","mesh","useRef","useFrame","current","rotation","z","ref","scale","position","args","attach","Moon","useLoader","TextureLoader","Moon_Texture","Normal_Texture","moonMap","normalMap","y","rotateZ","map","extend","OrbitControls","CameraControls","enableZoom","positionX","positionY","positionZ","useThree","camera","domElement","gl","x","controls","state","update","maxPolarAngle","Math","PI","minAzimuthAngle","minPolarAngle","MainScene","spotLightRef","lightGroupRef","axesHelperRef","clock","useHelper","SpotLightHelper","AxesHelper","distance","intensity","fallback","App","useState","className","style","height","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94f041a6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Circle.9f32f1c9.svg\";","export default __webpack_public_path__ + \"static/media/Normal_Texture.fd91a2fa.png\";","export default __webpack_public_path__ + \"static/media/Rope_Texture.820f1510.jpg\";","export default __webpack_public_path__ + \"static/media/Loading.d0c13b3e.svg\";","import React from 'react';\r\nimport LoadingSVG from '../../misc/img/Loading.svg';\r\n\r\nconst Loading = () => {\r\n  return <img src={LoadingSVG} alt='' />;\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\n\r\nconst GeometryLoading = ({ color = '#66ffff' }) => {\r\n  const mesh = useRef();\r\n\r\n  useFrame(() => (mesh.current.rotation.z += 0.5));\r\n\r\n  return (\r\n    <mesh ref={mesh} scale={0.2} position={[0, 0, 0]}>\r\n      <torusGeometry args={[15, 1.5, 10, 100, 5]} />\r\n      <meshBasicMaterial color={color} attach='material' />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default GeometryLoading;\r\n","export default __webpack_public_path__ + \"static/media/Moon_Texture.a2edaf85.jpg\";","import React, { useRef } from 'react';\r\nimport { useFrame, useLoader } from '@react-three/fiber';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\r\n\r\nimport Moon_Texture from '../../misc/img/Moon_Texture.jpg';\r\nimport Normal_Texture from '../../misc/img/Normal_Texture.png';\r\n\r\nconst Moon = ({ position }) => {\r\n  const mesh = useRef();\r\n\r\n  const [moonMap, normalMap] = useLoader(TextureLoader, [Moon_Texture, Normal_Texture]);\r\n\r\n  useFrame(() => (mesh.current.rotation.y += 0.002));\r\n\r\n  return (\r\n    <mesh ref={mesh} scale={0.5} position={position}>\r\n      <sphereGeometry args={[3, 32, 32]} rotateZ={20} />\r\n      <meshStandardMaterial map={moonMap} normalMap={normalMap} />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default Moon;\r\n","import React, { useRef } from 'react';\r\nimport { useThree, extend, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nextend({ OrbitControls });\r\n\r\nconst CameraControls = ({\r\n  enableZoom = false,\r\n  positionX = 0,\r\n  positionY = 0,\r\n  positionZ = 0,\r\n}) => {\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n\r\n  camera.position.x = positionX;\r\n  camera.position.y = positionY;\r\n  camera.position.z = positionZ;\r\n\r\n  // Ref to the controls, so that we can update them on every frame using useFrame\r\n  const controls = useRef();\r\n\r\n  useFrame(state => controls.current.update());\r\n\r\n  return (\r\n    <orbitControls\r\n      ref={controls}\r\n      args={[camera, domElement]}\r\n      enableZoom={enableZoom}\r\n      maxPolarAngle={Math.PI}\r\n      minAzimuthAngle={-Math.PI / 4}\r\n      minPolarAngle={0}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CameraControls;\r\n","import { useHelper } from '@react-three/drei';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport React, { Suspense, useRef } from 'react';\r\nimport { AxesHelper, SpotLightHelper } from 'three';\r\nimport GeometryLoading from '../global/GeometryLoading';\r\nimport Moon from '../lab/Moon';\r\nimport CameraControls from './CameraControls';\r\n\r\nconst MainScene = () => {\r\n  const spotLightRef = useRef();\r\n  const lightGroupRef = useRef();\r\n  const axesHelperRef = useRef();\r\n\r\n  useFrame(({ clock }) => {\r\n    lightGroupRef.current.rotation.x = 1.6;\r\n    spotLightRef.current.position.x = 1;\r\n  });\r\n\r\n  useHelper(spotLightRef, SpotLightHelper, 0.5, 'hotpink');\r\n  useHelper(AxesHelper, 0.5, 'hotpink');\r\n\r\n  return (\r\n    <>\r\n      <group ref={lightGroupRef}>\r\n        {/* MOVER EN EL EJE X DEL SPOTLIGHT */}\r\n        <spotLight scale={0.1} distance={10} ref={spotLightRef} intensity={4.16} />\r\n      </group>\r\n      <axesHelper ref={axesHelperRef} />\r\n      <CameraControls positionX={0} positionY={0} positionZ={10} />\r\n      <Suspense fallback={<GeometryLoading />}>\r\n        <Moon position={[5, 0, 0]} />\r\n      </Suspense>\r\n      <gridHelper />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainScene;\r\n","import React, { useState, Suspense } from 'react';\r\nimport { Fade } from 'react-reveal';\r\nimport UnstableButton from './components/lab/UnstableButton';\r\nimport BlurryFade from './components/lab/BlurryFade';\r\nimport ReactImage from './misc/img/ReactLogo.png';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport Rope from './components/lab/Rope';\r\nimport Loading from './components/global/Loading';\r\nimport MainScene from './components/scene/MainScene';\r\n\r\nimport './App.css';\r\nfunction App() {\r\n  const [started, setStarted] = useState(false);\r\n\r\n  const handleStart = () => setStarted(true);\r\n\r\n  return (\r\n    <div\r\n      className='App'\r\n      style={{\r\n        // display: 'grid',\r\n        // gridTemplateColumns: 'repeat(3, 1fr)',\r\n        height: '100vh',\r\n        // alignItems: 'center',\r\n        // justifyContent: 'center',\r\n        backgroundColor: '#333',\r\n      }}\r\n    >\r\n      <Suspense fallback={<Loading />}>\r\n        <Canvas>\r\n          <MainScene />\r\n        </Canvas>\r\n      </Suspense>\r\n\r\n      {/* <UnstableButton onClick={handleStart}>\r\n        <BlurryFade duration={0.7} type='ease-in-out' initialBlur={15} start={started}>\r\n          <div style={{ backgroundColor: '#333', width: '100%', height: '100%' }}>\r\n            Prueba\r\n            <img src={ReactImage} />\r\n          </div>\r\n        </BlurryFade>\r\n      </UnstableButton> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}